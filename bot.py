import telebot
from telebot import types
from config import *

bot = telebot.TeleBot(TOKEN)


# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–ª—é—á ‚Äî –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ—Ä—Ç–µ–∂: (–≤–æ–ø—Ä–æ—Å, [–æ—Ç–≤–µ—Ç—ã]))
questions = {
    1: ("–í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è: a) —Ä–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, b) —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã, c) —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏?", ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–£—á–∏—Ç–µ–ª—å"]),
    2: ("–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç: a) –∫–æ–¥ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, b) –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ —Ü–≤–µ—Ç–∞, c) –æ–±—É—á–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ?", ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–£—á–∏—Ç–µ–ª—å"]),
    3: ("–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ: a) —Å–∏–¥—è—á–∞—è, —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, b) —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞, c) –∞–∫—Ç–∏–≤–Ω–∞—è, —Å –æ–±—â–µ–Ω–∏–µ–º?", ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–£—á–∏—Ç–µ–ª—å"]),
    4: ("–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ c —Ä–∞–±–æ—Ç–µ: a) —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏–∫–∞, b) –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å, c) –ø–æ–º–æ—â—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –¥—Ä—É–≥–∏—Ö?", ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–£—á–∏—Ç–µ–ª—å"]),
    5: ("–ö–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: a) IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, b) –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –¥–∏–∑–∞–π–Ω, c) –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞?", ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–î–∏–∑–∞–π–Ω–µ—Ä", "–£—á–∏—Ç–µ–ª—å"])
}

# –í–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (1 ‚Äî –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 0.5 ‚Äî —Å—Ä–µ–¥–Ω–∏–π, 0 ‚Äî –Ω–∏–∑–∫–∏–π)
weights = {
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": {"a": 1, "b": 0, "c": 0.5},
    "–î–∏–∑–∞–π–Ω–µ—Ä":     {"a": 0, "b": 1, "c": 0.5},
    "–£—á–∏—Ç–µ–ª—å":     {"a": 0.5, "b": 0, "c": 1}
}


def calculate_result(chat_id, answers):
    scores = {"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": 0, "–î–∏–∑–∞–π–Ω–µ—Ä": 0, "–£—á–∏—Ç–µ–ª—å": 0}

    for q_num, ans in answers.items():
        for profession, weight_dict in weights.items():
            scores[profession] += weight_dict[ans]

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    best_profession = max(scores, key=scores.get)
    bot.send_message(chat_id, f"–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: **{best_profession}**! üéâ")
    bot.send_message(chat_id, f"–í–∞—à–∏ –±–∞–ª–ª—ã: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ‚Äî {scores['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç']}, –î–∏–∑–∞–π–Ω–µ—Ä ‚Äî {scores['–î–∏–∑–∞–π–Ω–µ—Ä']}, –£—á–∏—Ç–µ–ª—å ‚Äî {scores['–£—á–∏—Ç–µ–ª—å']}")

    if scores['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'] > scores['–î–∏–∑–∞–π–Ω–µ—Ä'] and scores['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'] > scores['–£—á–∏—Ç–µ–ª—å']:
        bot.send_message(chat_id, f"–≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞!")
    elif scores['–î–∏–∑–∞–π–Ω–µ—Ä'] > scores['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'] and scores['–î–∏–∑–∞–π–Ω–µ—Ä'] > scores['–£—á–∏—Ç–µ–ª—å']:
        bot.send_message(chat_id, f"–≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –î–∏–∑–∞–π–Ω–µ—Ä–∞!")
    elif scores['–£—á–∏—Ç–µ–ª—å'] > scores['–î–∏–∑–∞–π–Ω–µ—Ä'] and scores['–£—á–∏—Ç–µ–ª—å'] > scores['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç']:
        bot.send_message(chat_id, f"–≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –£—á–∏—Ç–µ–ª—è!")
    



@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º, –∫–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.")
    send_question(message.chat.id, 1, {})  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤
    

def send_question(chat_id, question_num, answers):
    if question_num > 5:  # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã
        calculate_result(chat_id, answers)
        return

    question, options = questions[question_num]
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text=f"a) {options[0]}", callback_data=f"a_{question_num}"),
        types.InlineKeyboardButton(text=f"b) {options[1]}", callback_data=f"b_{question_num}"),
        types.InlineKeyboardButton(text=f"c) {options[2]}", callback_data=f"c_{question_num}")
    ]
    keyboard.add(*buttons)
    bot.send_message(chat_id, question, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    answer, question_num = call.data.split('_')
    chat_id = call.message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers = {}
    if call.message.json.get('user_answers'):
        user_answers = call.message.json['user_answers']
    user_answers[int(question_num)] = answer

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    bot.answer_callback_query(call.id)
    send_question(chat_id, int(question_num) + 1, user_answers)







bot.polling(none_stop=True)
